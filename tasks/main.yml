---
- set_fact: appprovision="{{ appprovision|combine(app | default({})) }}"
  tags: always

- debug: var=appprovision verbosity=1
  tags: vars

- shell: "id -g -n"
  register: groupname
  tags: always

- name: Host pre-install commands
  local_action: "shell {{ item }}"
  environment: "{{ appprovision.pre_install.env_vars | default({}) }}"
  with_items: "{{ appprovision.pre_install.host_tasks | default([]) }}"
  tags: pre_commands

- name: Guest pre-install commands
  shell: "{{ item }}"
  environment: "{{ appprovision.pre_install.env_vars | default({}) }}"
  with_items: "{{ appprovision.pre_install.guest_tasks | default([]) }}"
  no_log: "{{ appprovision.nolog }}"
  tags: pre_commands

- name: Make sure DBs are present
  become: yes
  mysql_db:
    name: "{{ item }}"
    state: present
    encoding: "utf8"
    collation: "utf8_general_ci"
  with_items: "{{ appprovision.databases }}"
  tags: db

- name: Import DB SQL file
  become: yes
  mysql_db:
    name: "{{ item }}"
    state: import
    target: "/vagrant/{{ item }}.sql.gz"
  with_items: "{{ appprovision.databases }}"
  async: 3600
  poll: 0
  tags: db

- name: Host install commands
  local_action: "shell {{ item }}"
  environment: "{{ appprovision.install.env_vars | default({}) }}"
  with_items: "{{ appprovision.install.host_tasks | default([]) }}"
  tags: commands

- name: Guest install commands
  shell: "{{ item }}"
  environment: "{{ appprovision.install.env_vars | default({}) }}"
  with_items: "{{ appprovision.install.guest_tasks | default([]) }}"
  tags: commands

- name: Make sure app directories are present
  become: yes
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ansible_user_id }}"
    group: "{{ groupname.stdout }}"
    mode: 0775
    force: yes
  with_items: "{{ appprovision.directories }}"

- name: Make sure the ACLs for app directories for webserver user are present
  acl:
    name: "{{ item }}"
    entity: "{{ appprovision.webservergroup }}"
    etype: user
    permissions: rxw
    state: present
  with_items: "{{ appprovision.directories }}"

- name: Make sure the ACLs for app directories with default and webserver user are present
  acl:
    name: "{{ item }}"
    entity: "{{ appprovision.webservergroup }}"
    etype: user
    permissions: rxw
    default: yes
    state: present
  with_items: "{{ appprovision.directories }}"

- name: Make sure the ACLs for app directories with current user are present
  acl:
    name: "{{ item }}"
    entity: "{{ ansible_user_id }}"
    etype: user
    permissions: rxw
    default: yes
    state: present
  with_items: "{{ appprovision.directories }}"

- name: Ensure symlinks directories are present
  shell: "mkdir -p $(dirname {{ item.target }})"
  with_items: "{{ appprovision.symlinks | default([]) }}"
  tags: symlinks

- name: Make sure symlinks are present
  become: yes
  file:
    src: "{{ item.source }}"
    path: "{{ item.target }}"
    state: link
    owner: "{{ ansible_user_id }}"
    group: "{{ groupname.stdout }}"
    force: yes
  with_items: "{{ appprovision.symlinks | default([]) }}"

- name: Ensure app config directories are present
  shell: "mkdir -p $(dirname {{ item.dest }})"
  with_items: "{{ appprovision.config | default([]) }}"
  no_log: "{{ appprovision.nolog }}"
  tags: config

- name: Ensure config files are present
  become: yes
  template:
    src: "config.j2"
    dest: "{{ item.dest }}"
    mode: 0775
    owner: "{{ ansible_user_id }}"
    group: "{{ groupname.stdout }}"
  with_items: "{{ appprovision.config | default([]) }}"
  no_log: "{{ appprovision.nolog }}"
  tags: config

- name: "Files replacements"
  become: yes
  replace:
    dest: "{{ item.file }}"
    regexp: "{{ item.regex }}"
    replace: "{{ item.replace }}"
  with_items: "{{ appprovision.replacements | default([]) }}"
  no_log: "{{ appprovision.nolog }}"

- name: Host post-install commands
  local_action: "shell {{ item }}"
  environment: "{{ appprovision.post_install.env_vars | default({}) }}"
  with_items: "{{ appprovision.post_install.host_tasks | default([]) }}"
  tags: post_commands

- name: Guest post-install commands
  shell: "{{ item }}"
  environment: "{{ appprovision.post_install.env_vars | default({}) }}"
  with_items: "{{ appprovision.post_install.guest_tasks | default([]) }}"
  tags: post_commands
